test
package com.lh.httpclient;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.URL;
import java.net.URLConnection;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;

public class HttpRequest {

	public static String sendGet(String url, String param) {
		String result = "";
		BufferedReader in = null;
		try {
			String urlNameString = url + "?" + param;
			URL realUrl = new URL(urlNameString);
			// 打开和URL之间的连接
			URLConnection connection = realUrl.openConnection();
			// 设置通用的请求属性
			connection.setRequestProperty("accept", "*/*");
			connection.setRequestProperty("connection", "Keep-Alive");
			connection.setRequestProperty("user-agent",
					"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
			// 建立实际的连接
			connection.connect();
			// 获取所有响应头字段
			Map<String, List<String>> map = connection.getHeaderFields();
			// 遍历所有的响应头字段
			for (String key : map.keySet()) {
				System.out.println(key + "--->" + map.get(key));
			}
			// 定义 BufferedReader输入流来读取URL的响应
			in = new BufferedReader(new InputStreamReader(
					connection.getInputStream()));
			String line;
			while ((line = in.readLine()) != null) {
				result += line;
			}
		} catch (Exception e) {
			System.out.println("发送GET请求出现异常！" + e);
			e.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		return result;
	}

	public static String sendPost(String url, String param) {
		PrintWriter out = null;
		BufferedReader in = null;
		String result = "";
		try {
			URL realUrl = new URL(url);
			// 打开和URL之间的连接
			URLConnection conn = realUrl.openConnection();
			// 设置通用的请求属性
			conn.setRequestProperty("accept", "*/*");
			conn.setRequestProperty("connection", "Keep-Alive");
			conn.setRequestProperty("user-agent",
					"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
			// 发送POST请求必须设置如下两行
			conn.setDoOutput(true);
			conn.setDoInput(true);
			// 获取URLConnection对象对应的输出流
			out = new PrintWriter(conn.getOutputStream());
			// 发送请求参数
			out.print(param);
			// flush输出流的缓冲
			// 定义BufferedReader输入流来读取URL的响应
			in = new BufferedReader(
					new InputStreamReader(conn.getInputStream()));
			String line;
			while ((line = in.readLine()) != null) {
				result += line;
			}
		} catch (Exception e) {
			System.out.println("发送 POST 请求出现异常！" + e);
			e.printStackTrace();
		} finally {
			try {
				if (out != null) {
					out.close();
				}
				if (in != null) {
					in.close();
				}
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}
		return result;
	}

	public static void main(String[] args) throws InterruptedException {
		// 发送 GET 请求
		// String
		// s=HttpRequest.sendGet("http://localhost:8080/Home/RequestString",
		// "key=123&v=456");
		CountDownLatch start = new CountDownLatch(1);
		CountDownLatch ends = new CountDownLatch(1000);
		Thread[] threads = new Thread[500];
		for (int i = 0; i < 500; i++) {
			threads[i] = new Thread(new Runnable() {
				@Override
				public void run() {
					try {
						start.await();
						System.out.println("start to create order");
						HttpRequest.sendGet(
								"http://localhost:8080/spring3/order/create.do/A", "key=123&v=456");
					} catch (InterruptedException e) {
						e.printStackTrace();
					} finally {
						ends.countDown();
					}
					
				}
			});
			threads[i].start();
		}
		Thread[] thread2s = new Thread[500];
		for (int i = 0; i < 500; i++) {
			thread2s[i] = new Thread(new Runnable() {
				@Override
				public void run() {
					try {
						start.await();
						System.out.println("start to create order");
						HttpRequest.sendGet(
								"http://localhost:8080/spring3/order/create.do/B", "key=123&v=456");
					} catch (InterruptedException e) {
						e.printStackTrace();
					} finally {
						ends.countDown();
					}
					
				}
			});
			thread2s[i].start();
		}
		long startTime = System.currentTimeMillis();
		start.countDown();
		ends.await();
		System.out.println("complete");
		long endTime = System.currentTimeMillis();
		System.out.println("it takes " + (endTime - startTime) + "ms");

		// String
		// sr=HttpRequest.sendPost("http://localhost:8080/Home/RequestPostString",
		// "key=123&v=456");
		// System.out.println(sr);
	}
}



package com.mkyong.web.controller;

import java.util.HashMap;
import java.util.Map;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@RequestMapping("/order/")
public class OrderController {
	
	static Map<String, Long> inventory ;
	static{
		inventory = new HashMap<>();
		inventory.put("A", 10000l);
		inventory.put("B", 10000l);
	}
	
	public synchronized void secKill(String userId, String productName) {
		//最简单的秒杀，这里仅作为demo示例
		reduceInventory(productName);
	}
	//模拟秒杀操作，姑且认为一个秒杀就是将库存减一，实际情景要复杂的多
	public Long reduceInventory(String productName){
		inventory.put(productName,inventory.get(productName) - 1);
		return inventory.get(productName);
	}

	@RequestMapping(value = "create.do/{productName}", method = RequestMethod.GET)
	public @ResponseBody Map<String, Long> create(@PathVariable String productName) {
		secKill("u001", productName);
		return inventory;
	}
	
	@RequestMapping(value = "list.do", method = RequestMethod.GET)
	public @ResponseBody Map<String, Long> list() {
		return inventory;
	}
}
